*******************************************
关于界面：对比 Rails 和 Django 的模板系统
*******************************************

scaffold 的生成物虽然用处不大，但是给我们带来一些最佳实践。其中就有模板的继承和分区。

如果你深入使用过 Rails 的模板体系，那么恭喜你：你有超强的忍耐力！而且更重要的是，你只需要3分钟就可以理解 Django 的模板体系。

让我们先回顾一下 Rails 的模板系统：

1. 你创建了一个 xxxview，展现出一些数据。

2. 你意识到，各个 view 都有一些共同的内容。因为 Rails 也强调 DRY，所以你决定将这些共同的部分抽取出来。Rails 也看到了这点，所以你很高兴的看到，Rails 支持 layout。

3. Rails 的 layout 很简单，类似 html 的代码，`<%= yield %>` 部分会被具体视图替代，于是你很欣慰。

4. 但是等等，如何指定 layout？你又兴奋地发现：默认的 layout 是 `views/layouts/application.html.erb` ，你可以在 `controller/action` 去指定特定的 layout，甚至这种指定支持变量。在兴奋之余，你完全忽视了这等于让 controller 去做了 view 该做的事情。

5. 你实现了一个左右结构的 layout，左侧是导航，右侧是内容。你认为这个 layout 应该可以被多个 view 使用。但是你又发现不同的 view 需要的导航是不同的。由于存在几个 view 使用一种导航，另外几个 view 使用另一个导航的情况。由于 DRY，Rails 说，我有 partial。在 view 中可以使用 `<%= render "foo/bar" %>` ，甚至可以使用变量： `<%= render @mypartial %>` ，然后在 `controller/action` 中指定具体的 partial：`render :partial => 'foo/bar'`。尽管，controller 更进一步干预了 view 的细节；尽管，你又要记住：`partial: foo/bar` 意味着 `views/foo/_bar.html.erb`.

6. 如果 view 中的多块内容要插到 layout 的不同地方怎么办？除了主要的内容外，你还可以在view中定义：

  ::

      <% content_for :foo do %>
        foo foo foo
      <% end %>
      <% content_for :bar do %>
        bar bar bar
      <% end %>
      <div>下面居然就是主要内容了<div>

  然后这些内容块会分别插入到 layout 的 `<%= yield :foo %>`，`<%= yield :bar %>` 和 `<%= yield %>` 的地方。

7. 还有，还有，`<%= stylesheet_link_tag "application" %>`，`<%= javascript_include_tag "html5" %>`，……

到这里，你可以说自己已经了解 Rails 的模板系统了吗？

接下来我们可以放松心情了，因为 Django 的模板很容易理解，除了基本的变量、标签、过滤器等之外，模板的关系只有两个：

1. 包含。将模板中的相同部分提取出来共用。可以使用硬编码的字符串 `{% include 'foo/bar.html' %}` 或者变量名 `{% include template_name %}`，变量当然是在 view 中赋值（注意，不是 controller 中）。

2. 继承。模板继承是 Django 解决共用页面区域 DRY 的一个优雅的解决方案。简单地说就是先构造一个基础框架模板，而后在其子模板中对它所包含站点公用部分和定义块进行重载（override)。基础模板中，将内容不同的部分指定各个内容块：

  ::

      ...
      {% block foo %}
      <div>default content of foo</div>
      {% endblock %}
      ...

      {% block bar %}
      <div>default content of bar</div>
      {% endblock %}

      ...

在子模板中指定继承关系并 override 各个内容块即可。继承的写法是 `{% extends "base.html" %}`，注意一定要放在模板的开头部分。

好了，你已经理解了Django的模板系统，下面对产品清单界面的改造就非常容易理解了。分成两个部分：base 和 productlist。

抱歉，写到这里，发现篇幅已经不短了。只好界面的实现放到下一节了。
